
def search_matrix(matrix, target):
    if not matrix or not matrix[0]:
        return False
    
    rows, cols = len(matrix), len(matrix[0])
    row, col = 0, cols - 1
    
    while row < rows and col >= 0:
        current_value = matrix[row][col]
        if current_value == target:
            return True
        elif current_value < target:
            row += 1
        else:
            col -= 1
    
  return False
matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]]
target = 3
output = search_matrix(matrix, target)
print(output)


This algorithm treats the 2D matrix as a 1D array and performs a binary search on it. It calculates the mid-point and compares the value at the mid-point with the target. If they are equal, it returns True. If the target is greater, it searches the right half of the array, and if the target is smaller, it searches the left half. The process continues until the target is found or the search space is exhausted.

The time complexity of this algorithm is O(log(m * n)), where m is the number of rows and n is the number of columns in the matrix.

